using Test
using CUDA
using UnPack
using LinearAlgebra
using CUDA: @allowscalar
using MOKA: HorzMesh, ReadHorzMesh, GradientOnEdge, DivergenceOnCell, Edge, Cell, Vertex

import Adapt
import Downloads
import KernelAbstractions as KA

abstract type TestCase end 
abstract type PlanarTest <: TestCase end 

atol = 1e-8

on_architecture(backend::KA.Backend, array::AbstractArray) = Adapt.adapt_storage(backend, array)

# this could be improved...
struct ErrorMeasures{FT}
    L_two::FT
    L_inf::FT

    function ErrorMeasures(Numeric, Analytic, mesh, node_location)
        
        # Numeric value has a vertical dimension
        if ndims(Numeric) == 2
            # only support a single vertical layer for now
            @assert size(Numeric)[1] == 1
            # Remove the vertical layer from the Numeric solution
            Numeric = Numeric[1,:]
        end

        diff = Analytic - Numeric 
        area = compute_area(mesh, node_location)

        # compute the norms, with
        L_inf = norm(diff, Inf) / norm(Analytic, Inf)
        L_two = norm(diff .* area, 2) / norm(Analytic .* area, Inf)
    
        FT = typeof(L_inf)

        new{FT}(L_two, L_inf)
    end 
end

compute_area(mesh, ::Type{Cell}) = mesh.PrimaryCells.areaCell
compute_area(mesh, ::Type{Vertex}) = mesh.DualCells.areaTriangle
compute_area(mesh, ::Type{Edge}) = mesh.Edges.dcEdge .* mesh.Edges.dvEdge * 0.5

struct TestSetup{FT, AT}
    
    backend::KA.Backend

    x·∂ú::AT 
    y·∂ú::AT 

    x·µâ::AT
    y·µâ::AT

    Lx::FT 
    Ly::FT

    EdgeNormalX::AT
    EdgeNormalY::AT
    
    #TestSetup{FT,AT}(x·∂ú, y·∂ú, x·µâ, y·µâ, Lx, Ly, EdgeNormalX, EdgeNormalY) where {FT} = 
    #    new{FT}(x·∂ú, y·∂ú, x·µâ, y·µâ, Lx, Ly, EdgeNormalX, EdgeNormalY)
end 

function TestSetup(mesh::HorzMesh, ::Type{PlanarTest}; backend=KA.CPU())

    @unpack PrimaryCells, Edges = mesh

    @unpack x·∂ú, y·∂ú = PrimaryCells 
    @unpack x·µâ, y·µâ, angleEdge = Edges

    FT = eltype(x·∂ú)

    #Lx = maximum(x·∂ú) - minimum(x·∂ú)
    #Ly = maximum(y·∂ú) - minimum(y·∂ú)
    Lx = round(maximum(x·∂ú))
    Ly = sqrt(3.0)/2.0 * Lx

    EdgeNormalX = cos.(angleEdge)
    EdgeNormalY = sin.(angleEdge)

    return TestSetup(backend, 
                     on_architecture(backend, x·∂ú),
                     on_architecture(backend, y·∂ú),
                     on_architecture(backend, x·µâ),
                     on_architecture(backend, y·µâ), 
                     Lx, Ly,
                     on_architecture(backend, EdgeNormalX),
                     on_architecture(backend, EdgeNormalY))
end 

"""
Analytical function (defined as cell centers) 
"""
function h(test::TestSetup, ::Type{PlanarTest})
        
    @unpack x·∂ú, y·∂ú, Lx, Ly = test 

    nCells = length(x·∂ú)
    ftype = eltype(x·∂ú)
    backend = KA.get_backend(x·∂ú)
    
    result = KA.zeros(backend, ftype, (1, nCells))
    result[1,:] = @. sin(2.0 * pi * x·∂ú / Lx) * sin(2.0 * pi * y·∂ú / Ly)

    return result
end

"""
"""
function ùêÖÀ£(test::TestSetup, ::Type{PlanarTest})
    @unpack x·µâ, y·µâ, Lx, Ly = test 

    return @. sin(2.0 * pi * x·µâ / Lx) * cos(2.0 * pi * y·µâ / Ly)
end

"""
"""
function ùêÖ ∏(test::TestSetup, ::Type{PlanarTest})
    @unpack x·µâ, y·µâ, Lx, Ly = test 

    return @. cos(2.0 * pi * x·µâ / Lx) * sin(2.0 * pi * y·µâ / Ly)
end

function ‚àÇh‚àÇx(test::TestSetup, ::Type{PlanarTest})
    @unpack x·µâ, y·µâ, Lx, Ly = test 

    return @. 2.0 * pi / Lx * cos(2.0 * pi * x·µâ / Lx) * sin(2.0 * pi * y·µâ / Ly)
end

function ‚àÇh‚àÇy(test::TestSetup, ::Type{PlanarTest})
    @unpack x·µâ, y·µâ, Lx, Ly = test 

    return @. 2.0 * pi / Ly * sin(2.0 * pi * x·µâ / Lx) * cos(2.0 * pi * y·µâ / Ly)
end

"""
Analytical divergence of the ùêÖ‚Çë
"""
function divùêÖ(test::TestSetup, ::Type{PlanarTest})
    @unpack x·∂ú, y·∂ú, Lx, Ly = test 

    return @. 2 * pi * (1. / Lx + 1. / Ly) *
              cos(2.0 * pi * x·∂ú / Lx) * cos(2.0 * pi * y·∂ú / Ly)
end

"""
The edge normal component of the vector field of ùêÖ
"""
function ùêÖ‚Çë(test::TestSetup, ::Type{TC}) where {TC <: TestCase} 

    @unpack EdgeNormalX, EdgeNormalY = test

    # need intermediate values from broadcasting to work correctly
    ùêÖÀ£·µ¢ = ùêÖÀ£(test, TC)
    ùêÖ ∏·µ¢ = ùêÖ ∏(test, TC)
    
    ftype = eltype(EdgeNormalX)
    nEdges = length(EdgeNormalX)
    backend = KA.get_backend(EdgeNormalX)
    
    result = KA.zeros(backend, ftype, (1, nEdges))

    result[1,:] = @. EdgeNormalX * ùêÖÀ£·µ¢ + EdgeNormalY * ùêÖ ∏·µ¢

    return result
end

"""
The edge normal component of the gradient of scalar field h
"""
function ‚àáh‚Çë(test::TestSetup, ::Type{TC}) where {TC <: TestCase}

    @unpack EdgeNormalX, EdgeNormalY = test

    # need intermediate values from broadcasting to work correctly
    ‚àÇh·µ¢‚àÇx = ‚àÇh‚àÇx(test, TC)
    ‚àÇh·µ¢‚àÇy = ‚àÇh‚àÇy(test, TC)

    return @. EdgeNormalX * ‚àÇh·µ¢‚àÇx + EdgeNormalY * ‚àÇh·µ¢‚àÇy
end

function gradient!(grad, h·µ¢, mesh::HorzMesh; backend=KA.CPU())
    
    @unpack Edges = mesh

    @unpack nEdges, dcEdge, cellsOnEdge = Edges
    
    # only testing horizontal mesh, so set up dummy array for verticalLevels
    maxLevelEdgeTop = KA.ones(backend, eltype(cellsOnEdge), nEdges)

    kernel! = GradientOnEdge(backend)

    kernel!(cellsOnEdge, dcEdge, maxLevelEdgeTop, h·µ¢, grad, ndrange=nEdges)

    KA.synchronize(backend)
end

function divergence!(div, ùêÖ‚Çë, mesh::HorzMesh; backend=KA.CPU())

    @unpack PrimaryCells, DualCells, Edges = mesh

    @unpack nEdges, dvEdge = Edges
    @unpack nCells, nEdgesOnCell = PrimaryCells
    @unpack edgesOnCell, edgeSignOnCell, areaCell = PrimaryCells

    # only testing horizontal mesh, so set up dummy array for verticalLevels
    maxLevelEdgeTop = KA.ones(backend, eltype(edgesOnCell), nEdges)
    
    kernel! = DivergenceOnCell(backend)
    
    kernel!(div,
            ùêÖ‚Çë,
            nEdgesOnCell,
            edgesOnCell,
            maxLevelEdgeTop,
            edgeSignOnCell,
            dvEdge,
            areaCell,
            ndrange=nCells)

    KA.synchronize(backend)
end

# NOTE: planar doubly periodic meshes on lcrc do not give the expected answers
#       following Omega devGuide and using a custom generated mesh
#lcrc_url="https://web.lcrc.anl.gov/public/e3sm/mpas_standalonedata/mpas-ocean/"
#mesh_fp ="mesh_database/doubly_periodic_20km_1000x2000km_planar.151027.nc"
#mesh_fp ="mesh_database/doubly_periodic_10km_1000x2000km_planar.151117.nc"
#mesh_url = lcrc_url * mesh_fp
#
mesh_url = "https://gist.github.com/mwarusz/f8caf260398dbe140d2102ec46a41268/raw/e3c29afbadc835797604369114321d93fd69886d/PlanarPeriodic48x48.nc"
mesh_fn  = "MokaMesh.nc"

Downloads.download(mesh_url, mesh_fn)

#backend = KA.CPU()
backend = CUDABackend();

mesh = ReadHorzMesh(mesh_fn; backend=backend)
setup = TestSetup(mesh, PlanarTest; backend=backend)

###
### Gradient Test
###

# Scalar field define at cell centers
Scalar  = h(setup, PlanarTest)
# Calculate analytical gradient of cell centered filed (-> edges)
gradAnn = ‚àáh‚Çë(setup, PlanarTest)
# Numerical gradient using KernelAbstractions operator 
gradNum = KA.zeros(backend, Float64, (1, mesh.Edges.nEdges))
@allowscalar gradient!(gradNum, Scalar, mesh; backend=backend)

gradError = ErrorMeasures(gradNum, gradAnn, mesh, Edge)

# test
@test gradError.L_inf ‚âà 0.00125026071878552 atol=atol
@test gradError.L_two ‚âà 0.06045450851939962 atol=atol

###
### Divergence Test
###

# Edge normal component of vector value field defined at cell edges
VecEdge = ùêÖ‚Çë(setup, PlanarTest)
# Calculate the analytical divergence of field on edges (-> cells)
divAnn = divùêÖ(setup, PlanarTest)
# Numerical divergence using KernelAbstractions operator
divNum = KA.zeros(backend, Float64, (1, mesh.PrimaryCells.nCells))
@allowscalar divergence!(divNum, VecEdge, mesh; backend=backend)

divError = ErrorMeasures(divNum, divAnn, mesh, Cell)

# test
@test divError.L_inf ‚âà 0.00124886886594453 atol=atol
@test divError.L_two ‚âà 0.02997285278183242 atol=atol

###
### Results Display
###

arch = typeof(backend) <: KA.GPU ? "GPU" : "CPU" 

println("\n" * "="^45)
println("Kernel Abstraction Operator Tests on $arch")
println("="^45 * "\n")
println("Gradient")
println("--------")
println("L‚àû norm of error : $(gradError.L_inf)")
println("L‚ÇÇ norm of error : $(gradError.L_two)")
println("\nDivergence")
println("----------")
println("L‚àû norm of error: $(divError.L_inf)")
println("L‚ÇÇ norm of error: $(divError.L_two)")
println("\n" * "="^45 * "\n")

###
### Profiling GPU code:
###
using CUDA

CUDA.@time @allowscalar gradient!(gradNum, Scalar, mesh; backend=backend)
CUDA.@time @allowscalar divergence!(divNum, VecEdge, mesh; backend=backend)